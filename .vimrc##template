" Vundle section
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugins

" - Core & UI
Plugin 'VundleVim/Vundle.vim'
Plugin 'arcticicestudio/nord-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'zefei/vim-wintabs'
Plugin 'zefei/vim-wintabs-powerline'
" - Navigation
Plugin 'bkad/camelcasemotion'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
" - Snippets
Plugin 'sirver/ultisnips'
Plugin 'honza/vim-snippets'
" - Git
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
" - Programming
Plugin 'neoclide/coc.nvim'
Plugin 'dense-analysis/ale'
Plugin 'puremourning/vimspector'
" -- CSharp
Plugin 'OmniSharp/omnisharp-vim'
" -- JSON
Plugin 'Quramy/vison'
" -- LaTeX
Plugin 'lervag/vimtex'
" -- Markdown
Plugin 'iamcco/markdown-preview.nvim'
Plugin 'godlygeek/tabular'
Plugin 'preservim/vim-markdown'
" -- PlantUML
Plugin 'aklt/plantuml-syntax'
Plugin 'weirongxu/plantuml-previewer.vim'

call vundle#end()
filetype plugin indent on

" -----------------------------

colorscheme nord
syntax on

set number
set backspace=indent,eol,start
set statusline+=%#warningmsg#
set statusline+=%*
set expandtab
set tabstop=4
set shiftwidth=4
set mouse=a
set hidden
set updatetime=100
set encoding=utf-8

" Language specific

autocmd FileType haskell setlocal expandtab

" Vimtex

let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:texconceal='abdmg'
hi clear Conceal

" FZF

nnoremap <Leader>f :FZF
nnoremap <Leader>ff :FZF<CR>

" vim-wintabs

map <C-H> <Plug>(wintabs_previous)
map <C-L> <Plug>(wintabs_next)
map <C-T>c <Plug>(wintabs_close)
map <C-T>u <Plug>(wintabs_undo)
map <C-T>o <Plug>(wintabs_only)
map <C-W>c <Plug>(wintabs_close_window)
map <C-W>o <Plug>(wintabs_only_window)
command! Tabc WintabsCloseVimtab
command! Tabo WintabsOnlyVimtab

" Ultisnips

let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" CoC

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)


" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" ALE

let g:ale_linters = {
\  'cs': ['OmniSharp']
\}

" OmniSharp

let g:OmniSharp_selector_ui = 'fzf'
let g:OmniSharp_selector_findusages = 'fzf'
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [1],
\ 'border': [1],
\ 'borderchars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰'],
\ 'borderhighlight': ['Special']
\}

let g:OmniSharp_want_snippet=1

augroup omnisharp_commands
  autocmd!

  autocmd CursorHold *.cs OmniSharpTypeLookup

  autocmd FileType cs nmap <silent> <buffer> gd <Plug>(omnisharp_go_to_definition)
  autocmd FileType cs nmap <silent> <buffer> osfu <Plug>(omnisharp_find_usages)
  autocmd FileType cs nmap <silent> <buffer> osfi <Plug>(omnisharp_find_implementations)
  autocmd FileType cs nmap <silent> <buffer> ospd <Plug>(omnisharp_preview_definition)
  autocmd FileType cs nmap <silent> <buffer> ospi <Plug>(omnisharp_preview_implementations)
  autocmd FileType cs nmap <silent> <buffer> ost <Plug>(omnisharp_type_lookup)
  autocmd FileType cs nmap <silent> <buffer> osd <Plug>(omnisharp_documentation)
  autocmd FileType cs nmap <silent> <buffer> K <Plug>(omnisharp_documentation)
  autocmd FileType cs nmap <silent> <buffer> osfs <Plug>(omnisharp_find_symbol)
  autocmd FileType cs nmap <silent> <buffer> osfx <Plug>(omnisharp_fix_usings)
  autocmd FileType cs nmap <silent> <buffer> osca <Plug>(omnisharp_code_actions)
  autocmd FileType cs xmap <silent> <buffer> osca <Plug>(omnisharp_code_actions)
  autocmd FileType cs nmap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)
  autocmd FileType cs imap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)
 " Navigate up and down by method/property/field
  autocmd FileType cs nmap <silent> <buffer> [[ <Plug>(omnisharp_navigate_up)
  autocmd FileType cs nmap <silent> <buffer> ]] <Plug>(omnisharp_navigate_down)
  " Find all code errors/warnings for the current solution and populate the quickfix window
  autocmd FileType cs nmap <silent> <buffer> <Leader>osgcc <Plug>(omnisharp_global_code_check)
  " Contextual code actions (uses fzf, vim-clap, CtrlP or unite.vim selector when available)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osca <Plug>(omnisharp_code_actions)
  autocmd FileType cs xmap <silent> <buffer> <Leader>osca <Plug>(omnisharp_code_actions)
  " Repeat the last code action performed (does not use a selector)
  autocmd FileType cs nmap <silent> <buffer> <Leader>os. <Plug>(omnisharp_code_action_repeat)
  autocmd FileType cs xmap <silent> <buffer> <Leader>os. <Plug>(omnisharp_code_action_repeat)

  autocmd FileType cs nmap <silent> <buffer> <Leader>os= <Plug>(omnisharp_code_format)

  autocmd FileType cs nmap <silent> <buffer> <Leader>osnm <Plug>(omnisharp_rename)

  autocmd FileType cs nmap <silent> <buffer> <Leader>osre <Plug>(omnisharp_restart_server)
  autocmd FileType cs nmap <silent> <buffer> <Leader>osst <Plug>(omnisharp_start_server)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ossp <Plug>(omnisharp_stop_server)
augroup END

" Vimspector

let g:vimspector_enable_mappings = 'HUMAN'
nmap <Leader>di <Plug>VimspectorBaloonEval
xmap <Leader>di <Plug>VimspectorBaloonEval

" Airline

let g:airline_theme='deus'

" CamelCaseMotion

map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" Spellcheck

let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
setlocal spell
{% if yadm.os == "Darwin" %}
set spelllang=en_gb
{% else %}
set spelllang=pl,en_gb
{% endif %}
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u
hi clear SpellBad
hi SpellBad cterm=underline,bold

" Basic Keybinds

inoremap kj <Esc>

