" Vundle section
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugins

"" - Core & UI
Plugin 'VundleVim/Vundle.vim'
Plugin 'arcticicestudio/nord-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'preservim/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'
Plugin 'PhilRunninger/nerdtree-visual-selection'
Plugin 'ryanoasis/vim-devicons'
"" - Navigation
Plugin 'bkad/camelcasemotion'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
"" - Snippets
Plugin 'sirver/ultisnips'
Plugin 'honza/vim-snippets'
"" - Utility text
Plugin 'godlygeek/tabular'
"" - Git
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
"" - Programming
Plugin 'dense-analysis/ale'
Plugin 'prabirshrestha/vim-lsp'
Plugin 'mattn/vim-lsp-settings'
Plugin 'thomasfaingnaert/vim-lsp-snippets'
Plugin 'thomasfaingnaert/vim-lsp-ultisnips'
Plugin 'jiz4oh/vim-lspfuzzy'
Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'
Plugin 'andreypopp/asyncomplete-ale.vim'
Plugin 'puremourning/vimspector'
""" -- CSharp
Plugin 'OmniSharp/omnisharp-vim'
Plugin 'nickspoons/vim-sharpenup'
""" -- Markdown
Plugin 'iamcco/markdown-preview.nvim' " call mkdp#util#install()

call vundle#end()
filetype plugin indent on

" -----------------------------

colorscheme nord
set termguicolors
syntax on

set list
set listchars=space:·,tab:>-
set backspace=indent,eol,start
set statusline+=%#warningmsg#
set statusline+=%*
set expandtab
set tabstop=4
set shiftwidth=4
set mouse=a
set hidden
set showcmd
set updatetime=100
set notimeout nottimeout
set encoding=UTF-8

" Basic Keybinds

nnoremap <Leader>q :cclose<CR>
nmap <C-t>n :tabnext<CR>
nmap <C-t>p :tabprevious<CR>
inoremap kj <Esc>
vnoremap kj <Esc>

" Line number toggling
set number
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

" Spellcheck

let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
setlocal spell
{% if yadm.os == "Darwin" %}
set spelllang=en_gb
{% else %}
set spelllang=pl,en_gb
{% endif %}
set spelloptions=camel
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u
hi clear SpellBad
hi SpellBad cterm=underline,bold

" Plugins

"" Airline
let g:airline_theme='deus'

"" CamelCaseMotion

" All typical motions should work on camel/pascal/snake/kebap
" case when preceeded with this
let g:camelcasemotion_key = '<leader>'

"" NERDTree
let g:NERDTreeHijackNetrw=1
let g:NERDTreeGitStatusUseNerdFonts = 1
let g:NERDTreeGitStatusShowIgnored = 1

"" FZF

nnoremap <Leader>f/ :Lines<CR>
nnoremap <Leader><Leader>f/ :BLines<CR>
nnoremap <Leader>fc :Commits<CR>
nnoremap <Leader><Leader>fc :BCommits<CR>
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>fg :GFiles<CR>
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fw :Windows<CR>
nnoremap <Leader>fm :Marks<CR>
nnoremap <Leader>fr :Rg<CR>

"" gitgutter

nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

"" lsp

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    set foldmethod=expr
      \ foldexpr=lsp#ui#vim#folding#foldexpr()
      \ foldtext=lsp#ui#vim#folding#foldtext()

    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gpd <plug>(lsp-peek-definition)
    nmap <buffer> gs :FzfLspDocumentSymbol<CR>
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr :FzfLspReferences<CR>
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gpi <plug>(lsp-peek-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> gpt <plug>(lsp-peek-type-definition)
    nmap <buffer> gci <plug>(lsp-call-hierarchy-incoming)
    nmap <buffer> gco <plug>(lsp-call-hierarchy-outgoing)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> <leader>rf <plug>(lsp-document-format)
    vmap <buffer> <leader>rf <plug>(lsp-document-range-format)
    nmap <buffer> <leader>rl <plug>(lsp-code-lens)
    nmap <buffer> <leader>ca :FzfLspCodeAction<CR>
    vmap <buffer> <leader>ca :FzfLspCodeAction<CR>
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
endfunction

augroup lsp_install
    au!
    if has('textprop') | let g:lsp_semantic_enabled=1 | endif
    let g:lsp_experimental_workspace_folders=1
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_settings = { 'omnisharp-lsp': { 'disabled': 1 } }

"" ALE

let g:ale_linters = { 'cs': ['OmniSharp'] }

"" asyncomplete

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

"" Ultisnips

let g:UltiSnipsExpandTrigger = '<C-e>'
let g:UltiSnipsJumpForwardTrigger = '<C-b>'
let g:UltiSnipsJumpBackwardTrigger = '<C-z>'

"" OmniSharp

let g:OmniSharp_server_use_net6 = 1
let g:OmniSharp_selector_ui = 'fzf'
let g:OmniSharp_selector_findusages = 'fzf'
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [1],
\ 'border': [1],
\ 'borderchars': ['─', '│', '─', '│', '╭', '╮', '╯', '╰'],
\ 'borderhighlight': ['Special']
\}

let g:OmniSharp_want_snippet=1

augroup omnisharp_commands
  autocmd!

  autocmd FileType cs nmap <silent> <buffer> gd <Plug>(omnisharp_go_to_definition)
  autocmd FileType cs nmap <silent> <buffer> gpd <Plug>(omnisharp_preview_definition)
  autocmd FileType cs nmap <silent> <buffer> gs <Plug>(omnisharp_find_symbol)
  autocmd FileType cs nmap <silent> <buffer> gS <Plug>(omnisharp_find_symbol)
  autocmd FileType cs nmap <silent> <buffer> gr <Plug>(omnisharp_find_usages)
  autocmd FileType cs nmap <silent> <buffer> gi <Plug>(omnisharp_find_implementations)
  autocmd FileType cs nmap <silent> <buffer> gpi <Plug>(omnisharp_preview_implementations)
  autocmd FileType cs nmap <silent> <buffer> gt <Plug>(omnisharp_type_lookup)
  autocmd FileType cs nmap <silent> <buffer> gcc <Plug>(omnisharp_global_code_check)
  autocmd FileType cs nmap <silent> <buffer> K <Plug>(omnisharp_documentation)
  autocmd FileType cs nmap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)
  autocmd FileType cs imap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ru <Plug>(omnisharp_fix_usings)
  autocmd FileType cs nmap <silent> <buffer> <Leader>rn <Plug>(omnisharp_rename)
  autocmd FileType cs nmap <silent> <buffer> <Leader>ca <Plug>(omnisharp_code_actions)
  autocmd FileType cs vmap <silent> <buffer> <Leader>ca <Plug>(omnisharp_code_actions)
  autocmd FileType cs nmap <silent> <buffer> <Leader>. <Plug>(omnisharp_code_action_repeat)
  autocmd FileType cs xmap <silent> <buffer> <Leader>. <Plug>(omnisharp_code_action_repeat)
  autocmd FileType cs nmap <silent> <buffer> <Leader>= <Plug>(omnisharp_code_format)

  autocmd FileType cs nmap <silent> <buffer> [[ <Plug>(omnisharp_navigate_up)
  autocmd FileType cs nmap <silent> <buffer> ]] <Plug>(omnisharp_navigate_down)
  "autocmd FileType cs nmap <silent> <buffer> <Leader>osre <Plug>(omnisharp_restart_server)
  "autocmd FileType cs nmap <silent> <buffer> <Leader>osst <Plug>(omnisharp_start_server)
  "autocmd FileType cs nmap <silent> <buffer> <Leader>ossp <Plug>(omnisharp_stop_server)
augroup END

"" Vimspector

let g:vimspector_install_gadgets = [
\   'vscode-bash-debug',
\   'vscode-firefox-debug',
\   'netcoredbg'
\]
let g:vimspector_enable_mappings = 'HUMAN'
nmap <Leader>di <Plug>VimspectorBaloonEval
xmap <Leader>di <Plug>VimspectorBaloonEval
nmap <Leader>dB <Plug>VimspectorBreakpoints
nmap <Leader>dbb <Plug>VimspectorToggleBreakpoint
nmap <Leader>dbc <Plug>VimspectorToggleConditionalBreakpoint
nmap <Leader>dbf <Plug>VimspectorAddFunctionBreakpoint
nmap <Leader>dc <Plug>VimspectorContinue
nmap <Leader>dp <Plug>VimspectorPause
nmap <Leader>dS <Plug>VimspectorStop
nmap <Leader>dR <Plug>VimspectorRestart
nmap <Leader>d] <Plug>VimspectorStepInto
nmap <Leader>d[ <Plug>VimspectorStepOut
nmap <Leader>dd <Plug>VimspectorStepOver
nmap <Leader>dD <Plug>VimspectorRunToCursor

